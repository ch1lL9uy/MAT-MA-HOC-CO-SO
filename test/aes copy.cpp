#include "aes.h"
#include <algorithm>
#include <stdexcept>
#include <cstring>
#include <random>

const uint8_t AES::sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

const uint8_t AES::inv_sbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

const uint8_t AES::rcon[11] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

const uint8_t AES::galoisMul2[256] = {
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

const uint8_t AES::galoisMul3[256] = {
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

const uint8_t AES::galoisMul9[256] = {
    0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
    0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
    0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
    0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
    0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
    0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
    0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
    0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
    0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
    0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
    0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
    0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
    0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
    0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
    0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
    0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};

const uint8_t AES::galoisMul11[256] = {
    0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
    0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
    0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
    0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
    0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
    0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
    0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
    0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
    0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
    0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
    0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
    0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
    0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
    0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
    0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
    0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

const uint8_t AES::galoisMul13[256] = {
    0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
    0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
    0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
    0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
    0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
    0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
    0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
    0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
    0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
    0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
    0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
    0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
    0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
    0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
    0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
    0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};

const uint8_t AES::galoisMul14[256] = {
    0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
    0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
    0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
    0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
    0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
    0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
    0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
    0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
    0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
    0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
    0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
    0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
    0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
    0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
    0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
    0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

AES::AES(const std::vector<uint8_t>& key, Mode mode) : mode_(mode) {
    // Kiểm tra khóa hợp lệ
    validateKey(key);

    // Gán Nk và Nr dựa trên kích thước khóa
    switch (key.size()) {
        case static_cast<size_t>(KeyLength::AES_128):
            Nk = 4;  // 4 từ (128-bit)
            Nr = 10; // 10 vòng
            break;
        case static_cast<size_t>(KeyLength::AES_192):
            Nk = 6;  // 6 từ (192-bit)
            Nr = 12; // 12 vòng
            break;
        case static_cast<size_t>(KeyLength::AES_256):
            Nk = 8;  // 8 từ (256-bit)
            Nr = 14; // 14 vòng
            break;
        default:
            throw std::invalid_argument("Invalid key length. Must be 16, 24, or 32 bytes.");
    }

    // Mở rộng khóa và lưu vào expanded_key_
    keyExpansion(key);
}

std::vector<uint8_t> AES::encrypt(const std::vector<uint8_t>& plaintext, const std::vector<uint8_t>& iv) {
    // Kiểm tra IV
    validateIV(iv);

    // Tạo bản sao plaintext và thêm đệm
    std::vector<uint8_t> padded = plaintext;
    padData(padded);
    size_t blocks = padded.size() / 16;
    std::vector<uint8_t> ciphertext(blocks * 16);

    // Chuyển đổi vector thành mảng để xử lý
    const uint8_t* input = padded.data();
    uint8_t* output = ciphertext.data();

    // Xử lý theo chế độ
    switch (mode_) {
        case Mode::ECB:
            processECB(input, output, blocks, true);
            break;
        case Mode::CBC: {
            if (iv.empty()) {
                throw std::invalid_argument("IV required for CBC mode.");
            }
            processCBC(input, output, blocks, iv.data(), true);
            break;
        }
        case Mode::CFB: {
            if (iv.empty()) {
                throw std::invalid_argument("IV required for CFB mode.");
            }
            processCFB(input, output, blocks, iv.data(), true);
            break;
        }
        case Mode::OFB: {
            if (iv.empty()) {
                throw std::invalid_argument("IV required for OFB mode.");
            }
            processOFB(input, output, blocks, iv.data());
            break;
        }
        default:
            throw std::invalid_argument("Unsupported mode.");
    }

    return ciphertext;
}

std::vector<uint8_t> AES::decrypt(const std::vector<uint8_t>& ciphertext, const std::vector<uint8_t>& iv) {
    // Kiểm tra kích thước ciphertext
    if (ciphertext.size() % 16 != 0) {
        throw std::invalid_argument("Ciphertext length must be multiple of 16 bytes.");
    }

    // Kiểm tra IV
    validateIV(iv);

    // Tạo vector đầu ra
    size_t blocks = ciphertext.size() / 16;
    std::vector<uint8_t> plaintext(blocks * 16);

    // Chuyển đổi vector thành mảng
    const uint8_t* input = ciphertext.data();
    uint8_t* output = plaintext.data();

    // Xử lý theo chế độ
    switch (mode_) {
        case Mode::ECB:
            processECB(input, output, blocks, false);
            break;
        case Mode::CBC: {
            if (iv.empty()) {
                throw std::invalid_argument("IV required for CBC mode.");
            }
            processCBC(input, output, blocks, iv.data(), false);
            break;
        }
        case Mode::CFB: {
            if (iv.empty()) {
                throw std::invalid_argument("IV required for CFB mode.");
            }
            processCFB(input, output, blocks, iv.data(), false);
            break;
        }
        case Mode::OFB: {
            if (iv.empty()) {
                throw std::invalid_argument("IV required for OFB mode.");
            }
            processOFB(input, output, blocks, iv.data());
            break;
        }
        default:
            throw std::invalid_argument("Unsupported mode.");
    }

    // Loại bỏ đệm
    unpadData(plaintext);
    return plaintext;
}

void AES::validateIV(const std::vector<uint8_t>& iv) const {
    // Kiểm tra IV nếu chế độ không phải ECB
    if (mode_ != Mode::ECB && !iv.empty() && iv.size() != 16) {
        throw std::invalid_argument("IV must be 16 bytes for CBC, CFB, or OFB modes.");
    }
}

void AES::validateKey(const std::vector<uint8_t>& key) const {
    // Kiểm tra kích thước khóa
    if (key.size() != static_cast<size_t>(KeyLength::AES_128) &&
        key.size() != static_cast<size_t>(KeyLength::AES_192) &&
        key.size() != static_cast<size_t>(KeyLength::AES_256)) {
        throw std::invalid_argument("Key length must be 16, 24, or 32 bytes.");
    }
}

void AES::keyExpansion(const std::vector<uint8_t>& key) {
    // Đảm bảo khóa đã được kiểm tra hợp lệ trước đó
    if (key.size() != Nk * 4) {
        throw std::invalid_argument("Key size does not match Nk.");
    }

    // Khởi tạo mảng khóa mở rộng: Nb * (Nr + 1) từ (32-bit)
    expanded_key_.resize(Nb * (Nr + 1));

    // Sao chép khóa gốc vào các từ đầu tiên của khóa mở rộng
    for (size_t i = 0; i < Nk; ++i) {
        // Chuyển 4 byte thành 1 từ 32-bit (big-endian)
        expanded_key_[i] = (key[4 * i] << 24) | (key[4 * i + 1] << 16) |
                           (key[4 * i + 2] << 8) | key[4 * i + 3];
    }

    // Mở rộng khóa
    for (size_t i = Nk; i < Nb * (Nr + 1); ++i) {
        uint32_t temp = expanded_key_[i - 1];
        if (i % Nk == 0) {
            // Áp dụng rotWord, subWord và XOR với rcon
            temp = subWord(rotWord(temp)) ^ (rcon[i / Nk] << 24);
        } else if (Nk > 6 && i % Nk == 4) {
            // Chỉ áp dụng subWord cho AES-256
            temp = subWord(temp);
        }
        // XOR với từ trước đó (i - Nk)
        expanded_key_[i] = expanded_key_[i - Nk] ^ temp;
    }
}

void AES::encryptBlock(uint8_t state[16]) {
    // Bước 1: Thêm khóa vòng đầu tiên
    addRoundKey(state, 0);

    // Bước 2: Thực hiện Nr - 1 vòng chính
    for (size_t round = 1; round < Nr; ++round) {
        subBytes(state);
        shiftRows(state);
        mixColumns(state);
        addRoundKey(state, round);
    }

    // Bước 3: Vòng cuối (không có MixColumns)
    subBytes(state);
    shiftRows(state);
    addRoundKey(state, Nr);
}

void AES::decryptBlock(uint8_t state[16]) {
    // Bước 1: Thêm khóa vòng cuối
    addRoundKey(state, Nr);

    // Bước 2: Thực hiện Nr - 1 vòng chính (ngược)
    for (size_t round = Nr - 1; round >= 1; --round) {
        invShiftRows(state);
        invSubBytes(state);
        addRoundKey(state, round);
        invMixColumns(state);
    }

    // Bước 3: Vòng cuối (không có InvMixColumns)
    invShiftRows(state);
    invSubBytes(state);
    addRoundKey(state, 0);
}

uint32_t AES::subWord(uint32_t word) {
    uint8_t bytes[4] = {
        static_cast<uint8_t>(word >> 24),
        static_cast<uint8_t>(word >> 16),
        static_cast<uint8_t>(word >> 8),
        static_cast<uint8_t>(word)
    };
    return (sbox[bytes[0]] << 24) | (sbox[bytes[1]] << 16) |
           (sbox[bytes[2]] << 8) | sbox[bytes[3]];
}

uint32_t AES::rotWord(uint32_t word) {
    return ((word << 8) & 0xFFFFFFFF) | (word >> 24);
}

void AES::subBytes(uint8_t state[16]) {
    for (size_t i = 0; i < 16; ++i) {
        state[i] = sbox[state[i]];
    }
}

void AES::invSubBytes(uint8_t state[16]) {
    for (size_t i = 0; i < 16; ++i) {
        state[i] = inv_sbox[state[i]];
    }
}

void AES::shiftRows(uint8_t state[16]) {
    uint8_t temp[16];
    // Hàng 0: Không dịch
    temp[0] = state[0]; temp[4] = state[4]; temp[8] = state[8]; temp[12] = state[12];
    // Hàng 1: Dịch trái 1
    temp[1] = state[5]; temp[5] = state[9]; temp[9] = state[13]; temp[13] = state[1];
    // Hàng 2: Dịch trái 2
    temp[2] = state[10]; temp[6] = state[14]; temp[10] = state[2]; temp[14] = state[6];
    // Hàng 3: Dịch trái 3
    temp[3] = state[15]; temp[7] = state[3]; temp[11] = state[7]; temp[15] = state[11];
    // Sao chép lại vào state
    for (size_t i = 0; i < 16; ++i) {
        state[i] = temp[i];
    }
}

void AES::invShiftRows(uint8_t state[16]) {
    uint8_t temp[16];
    // Hàng 0: Không dịch
    temp[0] = state[0]; temp[4] = state[4]; temp[8] = state[8]; temp[12] = state[12];
    // Hàng 1: Dịch phải 1
    temp[1] = state[13]; temp[5] = state[1]; temp[9] = state[5]; temp[13] = state[9];
    // Hàng 2: Dịch phải 2
    temp[2] = state[10]; temp[6] = state[14]; temp[10] = state[2]; temp[14] = state[6];
    // Hàng 3: Dịch phải 3
    temp[3] = state[7]; temp[7] = state[11]; temp[11] = state[15]; temp[15] = state[3];
    // Sao chép lại vào state
    for (size_t i = 0; i < 16; ++i) {
        state[i] = temp[i];
    }
}

void AES::mixColumns(uint8_t state[16]) {
    uint8_t temp[16];
    for (size_t i = 0; i < 4; ++i) {
        size_t idx = i * 4;
        // Ma trận MixColumns: [2, 3, 1, 1]
        //                    [1, 2, 3, 1]
        //                    [1, 1, 2, 3]
        //                    [3, 1, 1, 2]
        temp[idx]   = galoisMul2[state[idx]] ^ galoisMul3[state[idx + 1]] ^ state[idx + 2] ^ state[idx + 3];
        temp[idx + 1] = state[idx] ^ galoisMul2[state[idx + 1]] ^ galoisMul3[state[idx + 2]] ^ state[idx + 3];
        temp[idx + 2] = state[idx] ^ state[idx + 1] ^ galoisMul2[state[idx + 2]] ^ galoisMul3[state[idx + 3]];
        temp[idx + 3] = galoisMul3[state[idx]] ^ state[idx + 1] ^ state[idx + 2] ^ galoisMul2[state[idx + 3]];
    }
    // Sao chép kết quả vào state
    for (size_t i = 0; i < 16; ++i) {
        state[i] = temp[i];
    }
}

void AES::invMixColumns(uint8_t state[16]) {
    uint8_t temp[16];
    for (size_t i = 0; i < 4; ++i) {
        size_t idx = i * 4;
        // Ma trận InvMixColumns: [14, 11, 13, 9]
        //                       [9,  14, 11, 13]
        //                       [13, 9,  14, 11]
        //                       [11, 13, 9,  14]
        temp[idx]   = galoisMul14[state[idx]] ^ galoisMul11[state[idx + 1]] ^ galoisMul13[state[idx + 2]] ^ galoisMul9[state[idx + 3]];
        temp[idx + 1] = galoisMul9[state[idx]] ^ galoisMul14[state[idx + 1]] ^ galoisMul11[state[idx + 2]] ^ galoisMul13[state[idx + 3]];
        temp[idx + 2] = galoisMul13[state[idx]] ^ galoisMul9[state[idx + 1]] ^ galoisMul14[state[idx + 2]] ^ galoisMul11[state[idx + 3]];
        temp[idx + 3] = galoisMul11[state[idx]] ^ galoisMul13[state[idx + 1]] ^ galoisMul9[state[idx + 2]] ^ galoisMul14[state[idx + 3]];
    }
    // Sao chép kết quả vào state
    for (size_t i = 0; i < 16; ++i) {
        state[i] = temp[i];
    }
}

void AES::addRoundKey(uint8_t state[16], size_t round) {
    for (size_t i = 0; i < 4; ++i) {
        uint32_t round_key = expanded_key_[round * Nb + i];
        state[i * 4] ^= (round_key >> 24) & 0xFF;
        state[i * 4 + 1] ^= (round_key >> 16) & 0xFF;
        state[i * 4 + 2] ^= (round_key >> 8) & 0xFF;
        state[i * 4 + 3] ^= round_key & 0xFF;
    }
}

void AES::processECB(const uint8_t* input, uint8_t* output, size_t blocks, bool encrypt) {
    for (size_t i = 0; i < blocks; ++i) {
        uint8_t state[16];
        std::copy(input + i * 16, input + (i + 1) * 16, state);
        if (encrypt) {
            encryptBlock(state);
        } else {
            decryptBlock(state);
        }
        std::copy(state, state + 16, output + i * 16);
    }
}

void AES::processCBC(const uint8_t* input, uint8_t* output, size_t blocks, const uint8_t iv[16], bool encrypt) {
    uint8_t state[16];
    uint8_t chain[16]; // Lưu trữ khối trước đó (hoặc IV)
    std::copy(iv, iv + 16, chain);

    if (encrypt) {
        for (size_t i = 0; i < blocks; ++i) {
            // Sao chép khối đầu vào
            std::copy(input + i * 16, input + (i + 1) * 16, state);
            // XOR với chain (IV hoặc khối mã hóa trước)
            xorBlock(state, chain);
            // Mã hóa
            encryptBlock(state);
            // Cập nhật chain và sao chép kết quả
            std::copy(state, state + 16, chain);
            std::copy(state, state + 16, output + i * 16);
        }
    } else {
        for (size_t i = 0; i < blocks; ++i) {
            // Sao chép khối đầu vào
            std::copy(input + i * 16, input + (i + 1) * 16, state);
            // Giải mã
            decryptBlock(state);
            // XOR với chain (IV hoặc khối mã hóa trước)
            xorBlock(state, chain);
            // Cập nhật chain và sao chép kết quả
            std::copy(input + i * 16, input + (i + 1) * 16, chain);
            std::copy(state, state + 16, output + i * 16);
        }
    }
}

// void AES::processCFB(const uint8_t* input, uint8_t* output, size_t blocks, const uint8_t iv[16], bool encrypt) {
//     uint8_t state[16];
//     uint8_t chain[16];
//     std::copy(iv, iv + 16, chain);

//     for (size_t i = 0; i < blocks; ++i) {
//         // Mã hóa chain
//         std::copy(chain, chain + 16, state);
//         encryptBlock(state);
//         // XOR với khối đầu vào để tạo đầu ra
//         std::copy(input + i * 16, input + (i + 1) * 16, output + i * 16);
//         xorBlock(output + i * 16, state);
//         // Cập nhật chain: dùng input (mã hóa) hoặc output (giải mã)
//         std::copy(encrypt ? input + i * 16 : output + i * 16, 
//                   encrypt ? input + (i + 1) * 16 : output + (i + 1) * 16, chain);
//     }
// }

// void AES::processCFB(const uint8_t* input, uint8_t* output, size_t blocks, const uint8_t iv[16], bool encrypt) {
//     uint8_t state[16];
//     uint8_t chain[16];
//     std::copy(iv, iv + 16, chain);

//     for (size_t i = 0; i < blocks; ++i) {
//         // Mã hóa chuỗi chain hiện tại
//         std::copy(chain, chain + 16, state);
//         encryptBlock(state);  // AES_encrypt(chain)

//         // XOR với input để ra output
//         for (size_t j = 0; j < 16; ++j) {
//             output[i * 16 + j] = input[i * 16 + j] ^ state[j];
//         }

//         // Cập nhật chain = ciphertext hiện tại (dù là mã hóa hay giải mã)
//         std::copy(encrypt ? output + i * 16 : input + i * 16, 
//                   encrypt ? output + (i + 1) * 16 : input + (i + 1) * 16, chain);
//     }
// }

// void AES::processCFB(const uint8_t* input, uint8_t* output, size_t blocks, const uint8_t iv[16], bool encrypt) {
//     uint8_t chain[16];
//     memcpy(chain, iv, 16); // Khởi tạo chain từ IV

//     for (size_t i = 0; i < blocks; ++i) {
//         // Mã hóa chain trực tiếp
//         encryptBlock(chain); // AES_encrypt(chain)

//         // XOR với input để ra output
//         uint8_t temp[16];
//         for (size_t j = 0; j < 16; ++j) {
//             temp[j] = input[i * 16 + j] ^ chain[j];
//         }
//         memcpy(output + i * 16, temp, 16);

//         // Cập nhật chain = ciphertext
//         memcpy(chain, encrypt ? output + i * 16 : input + i * 16, 16);
//     }
// }

void AES::processCFB(const uint8_t* input, uint8_t* output, size_t blocks, const uint8_t iv[16], bool encrypt) {
    uint8_t chain[16];
    std::copy(iv, iv + 16, chain);

    for (size_t i = 0; i < blocks; ++i) {
        uint8_t encrypted_chain[16];
        std::copy(chain, chain + 16, encrypted_chain);
        encryptBlock(encrypted_chain); // AES(chain)

        const uint8_t* current_input = input + i * 16;
        uint8_t* current_output = output + i * 16;

        // output = input XOR AES(chain)
        for (size_t j = 0; j < 16; ++j) {
            current_output[j] = current_input[j] ^ encrypted_chain[j];
        }

        // Cập nhật chain
        if (encrypt) {
            std::copy(current_output, current_output + 16, chain);
        } else {
            std::copy(current_input, current_input + 16, chain);
        }
    }
}


void AES::processOFB(const uint8_t* input, uint8_t* output, size_t blocks, const uint8_t iv[16]) {
    uint8_t state[16];
    uint8_t chain[16];
    std::copy(iv, iv + 16, chain);

    for (size_t i = 0; i < blocks; ++i) {
        // Mã hóa chain
        std::copy(chain, chain + 16, state);
        encryptBlock(state);
        // Cập nhật chain
        std::copy(state, state + 16, chain);
        // XOR với đầu vào để tạo đầu ra
        std::copy(input + i * 16, input + (i + 1) * 16, output + i * 16);
        xorBlock(output + i * 16, state);
    }
}

std::vector<uint8_t> AES::generateRandomIV() {
    std::vector<uint8_t> iv(16);
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<uint8_t> dis(0, 255);

    for (size_t i = 0; i < 16; ++i) {
        iv[i] = dis(gen);
    }
    return iv;
}

void AES::xorBlock(uint8_t* target, const uint8_t* source) {
    for (size_t i = 0; i < 16; ++i) {
        target[i] ^= source[i];
    }
}

void AES::padData(std::vector<uint8_t>& data) const {
    size_t pad_len = 16 - (data.size() % 16);
    uint8_t pad_value = static_cast<uint8_t>(pad_len);
    data.insert(data.end(), pad_len, pad_value);
}

void AES::unpadData(std::vector<uint8_t>& data) const {
    if (data.empty()) {
        throw std::invalid_argument("Data is empty.");
    }
    uint8_t pad_value = data.back();
    if (pad_value == 0 || pad_value > 16) {
        throw std::invalid_argument("Invalid padding value.");
    }
    for (size_t i = 1; i <= pad_value; ++i) {
        if (data[data.size() - i] != pad_value) {
            throw std::invalid_argument("Invalid padding format.");
        }
    }
    data.resize(data.size() - pad_value);
}
